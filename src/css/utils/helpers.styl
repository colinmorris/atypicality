// font
// Function will output a classname for a type size
// Set 'all' to output all sizes as classnames
// Toggle lineheight with 'lh'
// ------------------------------------------------
// e.g.
// set-type-class('medium', lh = true)
// outputs to
// .medium {
//  font-size: 18px;
//  line-height: 2;
// }
set-type-class(scale, lh = false)
    if scale in $type-size
        .{scale}
            font-size: $type-size[scale].size
            if lh == true
                line-height: $type-size[scale].line-height
    
    else if scale == all
        for scale in $type-size
            .{scale}
                font-size: $type-size[scale].size
                if lh == true
                    line-height: $type-size[scale].line-height
    else
        error('Not a defined type scale')

// Function will output a font-size within a selector
// Toggle lineheight with 'lh'
// ------------------------------------------------
// e.g.
// .selector
//         set-type-size('medium', lh = true)
// outputs to
// .selector {
//  font-size: 18px;
//  line-height: 2;
// }
set-type-size(scale, lh = false)
    if scale in $type-size
        font-size: $type-size[scale].size
        if lh == true
            line-height: $type-size[scale].line-height
    else
        error('Not a defined type scale')

// -------------------
// WEB FONT LOADING
// -------------------
// font = the actual font name (eg. Open Sans)
// hash = the hashed version (eg. open-sans)
// fallback = fallback stack (eg. $sans or 'Helvetica, Arial')
// fb-weight = fallback weight
fontify($font, $hash, $fallback)
	.tk-{$hash}
		font-family $fallback
		.loaded-{$hash} & 
			font-family $font, $fallback
			
// -------------------
// BREAKPOINTS
// -------------------
mq(breakpoint)
	if breakpoint in $mq_vars
		condition = unquote($mq_vars[breakpoint])
		condition = 'only screen and %s' % condition
		@media condition
			{block}
	else
		error('Not a defined media query')

// -------------------
// CLEARFIX
// -------------------
clearfix()
	overflow hidden
	zoom 1

// -------------------
// LIST STYLES
// -------------------
// Default is none
list-style(type = none)
	list-style-type type
	margin 0
	padding 0
	
// -------------------
// GRIDS
// -------------------
flex-grid(num, child, gutter = false, direction = row)
	display flex
	flex-direction direction
	flex-wrap wrap
	> .{child}
		width (100% / num)
		if num == equal
			flex 1
	if gutter
		justify-content space-between
		> .{child}
			flex-basis (100% / num) - gutter

// -------------------
// HIDE
// -------------------
hidden(type = false)
	if type == accessible
		width 1px 
		height 1px 
		overflow hidden
		position absolute
	else if type == invisible
		visibility hidden
	else
		display none


// -------------------
// VERTICAL CENTERING
// Centers items vertically
// If you want horizontal centering on flex
// add `justify-content center`
// -------------------
// Put this on the parent element
center(type, child = false)
	if type == flex
		// No child, set to false in function
		display flex
		align-items center
	else if type == translate
		transform-style preserve-3d
		> .{child}
			position relative
			top 50%
			transform translateY(-50%)
	else if type == absolute
		position relative
		> .{child}
			position absolute
			top 50%
			width 100%

//===============================
// Z-INDEX
//===============================
set-index(layer)
	if layer in $z-index
		return $z-index[layer]
	else
		error('Not a layer in z-index')

//===============================
// RANDOM
//===============================
random(min, max)
	return math(math(0, 'random')*(max - min + 1) + min, 'floor')
	
//===============================
// MODULAR SCALE
//===============================
ms(scale)
	modularScale(scale, 18, 'golden', rem)
